/* Fully Automated – Site Survey (Mobile)
 * Notes:
 * - Lightly minified; section headers retained for maintenance
 * - Matches CSV header: Quantity | Model | Location | Manufacturer | System | Custom Field 12
 * - Systems tabs order: Control4, Lighting, Cameras, Security, Networking, Locks, Misc
 */

/* ==========================
   Global constants & State
========================== */
const CSV_HEADERS=["Quantity","Model","Location","Manufacturer","System","Custom Field 12"];
const SYSTEM_TABS=["Control4","Lighting","Cameras","Security","Networking","Locks","Misc"];
const SYSTEM_TO_EXPORT={Control4:"Control Systems",Lighting:"Lighting",Cameras:"Surveillance",Security:"Security Systems",Networking:"Networking"};
let state={client:{name:"",phone:"",email:"",address:""},projectName:"",floors:[],selectedFloorId:null,selectedRoomId:null,selectedTab:"Control4",settings:{cameraRetentionDays:30,cameraBitrateMbps:4,sparePercent:20},racks:[]};

/* ==========================
   Utils
========================== */
const uid=()=>Math.random().toString(36).slice(2,9);
const el=s=>document.querySelector(s);
const csvCell=v=>{if(v==null)return"";const s=String(v).replace(/"/g,'""');return /[",\n]/.test(s)?`"${s}"`:s};
const escapeHTML=v=>v==null?"":String(v).replace(/[&<>]/g, c=>({"&":"&amp;","<":"&lt;",">":"&gt;"}[c]));
function downloadFile(content,filename,mime){const blob=new Blob([content],{type:mime});const url=URL.createObjectURL(blob);const a=document.createElement("a");a.href=url;a.download=filename;document.body.appendChild(a);a.click();a.remove();URL.revokeObjectURL(url);}

/* ==========================
   Swatch data (shade classes)
========================== */
const SWATCH_C4_KEYPAD=[ // light → dark
  {name:"Snow White",code:"SW",cls:"sw-c4-sw"},
  {name:"White",code:"WH",cls:"sw-c4-wh"},
  {name:"Light Almond",code:"LA",cls:"sw-c4-la"},
  {name:"Biscuit",code:"BI",cls:"sw-c4-bi"},
  {name:"Light Gray",code:"LG",cls:"sw-c4-lg"},
  {name:"Taupe",code:"TP",cls:"sw-c4-tp"},
  {name:"Stone Gray",code:"SG",cls:"sw-c4-sg"},
  {name:"Aluminum",code:"AU",cls:"sw-c4-au"},
  {name:"Coffee",code:"CF",cls:"sw-c4-cf"},
  {name:"Black",code:"BL",cls:"sw-c4-bl"},
  {name:"Midnight Black",code:"MB",cls:"sw-c4-mb"}
];
const SWATCH_C4_TOUCH=[{name:"White",code:"WH",cls:"sw-c4t-wh"},{name:"Black",code:"BL",cls:"sw-c4t-bl"}];
const SWATCH_LUTRON=[ // light → dark
  {name:"White",code:"WH",cls:"sw-lut-wh"},
  {name:"Snow",code:"SW",cls:"sw-lut-sw"},
  {name:"Mist",code:"MI",cls:"sw-lut-mi"},
  {name:"Biscuit",code:"BI",cls:"sw-lut-bi"},
  {name:"Light Almond",code:"LA",cls:"sw-lut-la"},
  {name:"Ivory",code:"IV",cls:"sw-lut-iv"},
  {name:"Black",code:"BL",cls:"sw-lut-bl"},
  {name:"Midnight",code:"MN",cls:"sw-lut-mn"}
];
const SWATCH_NETWORK=[
  {name:"White",code:"WH",cls:"sw-net-wh"},
  {name:"Blue",code:"BU",cls:"sw-net-bu"},
  {name:"Green",code:"GN",cls:"sw-net-gn"},
  {name:"Red",code:"RD",cls:"sw-net-rd"},
  {name:"Black",code:"BL",cls:"sw-net-bl"}
];
const CAMERA_COLOR=[{name:"White",code:"W",cls:"sw-cam-w"},{name:"Black",code:"B",cls:"sw-cam-b"}];

/* build swatch row with instant selection feedback */
function buildSwatchRow(list,currentCode,onPick){
  const wrap=document.createElement("div"); wrap.className="swatchRow";
  list.forEach(it=>{
    const b=document.createElement("button");
    b.className=`swatch ${it.cls}`+(currentCode===it.code?" is-selected":"");
    b.title=it.name;
    b.onclick=(e)=>{e.preventDefault(); wrap.querySelectorAll(".swatch").forEach(x=>x.classList.remove("is-selected")); b.classList.add("is-selected"); onPick(it); };
    wrap.appendChild(b);
  });
  return wrap;
}

/* ==========================
   Floors & Rooms (Left pane)
========================== */
const floorsList=el("#floorsList");
function addFloor(name){
  const fid=uid();
  const f={id:fid,name:name||`Floor ${state.floors.length+1}`,rooms:[]};
  state.floors.push(f);
  addRoom(fid,"Room 1");
  selectRoom(fid,f.rooms[0].id);
  renderLeft(); renderTabs(); renderMain(); renderSummary();
}
function addRoom(fid,name){
  const f=state.floors.find(x=>x.id===fid); if(!f) return;
  const rid=uid();
  const room={id:rid,name:name||"New Room",notes:"",photos:[],isEquipmentRoom:false,
    control4:{videoStreams:0,audio:{enabled:false,wired:false,speakers:0,distribution:"Stereo"},keypads:[],touchscreens:[],remotes:[]},
    lighting:{banks:[]},
    cameras:[],
    security:{zones:[],panel:{present:false,type:"remote"}},
    networking:{banks:[]}
  };
  f.rooms.push(room);
}
function copyFloor(fid){
  if(!confirm("Copy floor and its rooms?")) return;
  const f=state.floors.find(x=>x.id===fid);
  const nf=JSON.parse(JSON.stringify(f));
  nf.id=uid(); nf.name=f.name+" (copy)";
  nf.rooms.forEach(r=>r.id=uid());
  state.floors.push(nf); renderLeft();
}
function deleteFloor(fid){
  if(!confirm("Delete floor?")) return;
  state.floors=state.floors.filter(f=>f.id!==fid);
  const first=state.floors[0];
  state.selectedFloorId=first?first.id:null;
  state.selectedRoomId=first&&first.rooms[0]?first.rooms[0].id:null;
  renderLeft(); renderMain(); renderSummary();
}
function copyRoom(fid,rid){
  if(!confirm("Copy room?")) return;
  const f=state.floors.find(x=>x.id===fid);
  const r=f.rooms.find(x=>x.id===rid);
  const nr=JSON.parse(JSON.stringify(r));
  nr.id=uid(); nr.name=r.name+" (copy)";
  f.rooms.push(nr); renderLeft();
}
function deleteRoom(fid,rid){
  if(!confirm("Delete room?")) return;
  const f=state.floors.find(x=>x.id===fid);
  f.rooms=f.rooms.filter(r=>r.id!==rid);
  if(state.selectedRoomId===rid){ state.selectedRoomId=f.rooms[0]?f.rooms[0].id:null; }
  renderLeft(); renderMain(); renderSummary();
}
function selectRoom(fid,rid){ state.selectedFloorId=fid; state.selectedRoomId=rid; renderLeft(); renderMain(); }
function renderLeft(){
  floorsList.innerHTML="";
  state.floors.forEach(f=>{
    const card=document.createElement("div"); card.className="floorCard";
    const header=document.createElement("div"); header.className="floorHeader";
    const name=document.createElement("input"); name.value=f.name; name.oninput=(e)=>{f.name=e.target.value; renderSummary();};
    const btns=document.createElement("div"); btns.className="inline";
    const copy=document.createElement("button"); copy.className="btn-sm"; copy.textContent="Copy"; copy.onclick=()=>copyFloor(f.id);
    const del=document.createElement("button"); del.className="btn-sm"; del.textContent="Del"; del.onclick=()=>deleteFloor(f.id);
    header.appendChild(name); btns.appendChild(copy); btns.appendChild(del); header.appendChild(btns); card.appendChild(header);

    const rooms=document.createElement("div"); rooms.className="rooms";
    f.rooms.forEach(r=>{
      const row=document.createElement("div"); row.className="roomBtn"+(state.selectedRoomId===r.id?" active":"");
      const left=document.createElement("div"); left.className="inline";
      const rn=document.createElement("input"); rn.value=r.name; rn.oninput=(e)=>{r.name=e.target.value; renderSummary();};
      left.appendChild(rn);
      const tools=document.createElement("div"); tools.className="inline";
      const c=document.createElement("button"); c.className="btn-sm"; c.textContent="Copy"; c.onclick=(ev)=>{ev.stopPropagation(); copyRoom(f.id,r.id);};
      const d=document.createElement("button"); d.className="btn-sm"; d.textContent="Del"; d.onclick=(ev)=>{ev.stopPropagation(); deleteRoom(f.id,r.id);};
      tools.appendChild(c); tools.appendChild(d);
      row.onclick=()=>selectRoom(f.id,r.id);
      row.appendChild(left); row.appendChild(tools);
      rooms.appendChild(row);
    });
    const add=document.createElement("button"); add.className="btn-sm"; add.textContent="+ Add Room"; add.onclick=()=>{addRoom(f.id); renderLeft();};
    card.appendChild(rooms); card.appendChild(add);
    floorsList.appendChild(card);
  });
}

/* ==========================
   Tabs + Main content
========================== */
const systemTabs=el("#systemTabs");
function renderTabs(){
  systemTabs.innerHTML="";
  SYSTEM_TABS.forEach(t=>{
    const e=document.createElement("div");
    e.className="tab"+(state.selectedTab===t?" active":"");
    e.textContent=t;
    e.onclick=()=>{state.selectedTab=t; renderTabs(); renderMain();};
    systemTabs.appendChild(e);
  });
}
const mainContent=el("#mainContent");
function getSelected(){ const f=state.floors.find(x=>x.id===state.selectedFloorId); if(!f) return {}; const r=f.rooms.find(x=>x.id===state.selectedRoomId); return {f,r}; }
function markEquipmentRoom(room){ state.floors.forEach(ff=>ff.rooms.forEach(rr=>rr.isEquipmentRoom=false)); room.isEquipmentRoom=true; }
function renderMain(){
  const {f,r}=getSelected();
  mainContent.innerHTML="";
  if(!r){ mainContent.innerHTML='<div class="muted">Select a floor & room.</div>'; return; }
  const header=document.createElement("div"); header.className="systemSummary"; header.innerHTML=`<strong>${escapeHTML(f.name)} — ${escapeHTML(r.name)}</strong>`; mainContent.appendChild(header);
  const tab=state.selectedTab;
  if(tab==="Control4") renderControl4(r);
  else if(tab==="Lighting") renderLighting(r);
  else if(tab==="Cameras") renderCameras(r);
  else if(tab==="Security") renderSecurity(r);
  else if(tab==="Networking") renderNetworking(r);
  else renderMisc(r,tab);
}

/* ==========================
   CONTROL4
========================== */
function renderControl4(r){
  const wrap=document.createElement("div");
  // Top form
  const form=document.createElement("div");
  form.innerHTML=
    "<div class='row'>"
      +"<div class='col'><label>Equipment Room?</label><select id='eqRoom'><option value='no'>No</option><option value='yes'>Yes</option></select></div>"
      +"<div class='col'><label>Video streams (count)</label><input id='videoCount' type='number' min='0' value='"+Number(r.control4.videoStreams||0)+"'></div>"
      +"<div class='col'><label>Audio</label><select id='audioEnabled'><option value='no'>None</option><option value='wired'>Wired</option><option value='wireless'>Wireless</option></select></div>"
      +"<div class='col'><label>Speakers</label><input id='speakerCount' type='number' min='0' value='"+Number(r.control4.audio.speakers||0)+"'></div>"
    +"</div>"
    +"<div class='row'><div class='col'><label>Audio distribution</label>"
    +"<select id='audioDist'><option>Mono</option><option selected>Stereo</option><option>2.1</option><option>5.1</option><option>7.1</option><option>7.2</option><option>7.2.4</option></select>"
    +"</div></div>";
  wrap.appendChild(form);

  // Keypads
  const ksec=document.createElement("div"); ksec.className="systemSummary";
  ksec.innerHTML="<strong>Keypads</strong><div id='keypadsList'></div>";
  const addK=document.createElement("button"); addK.className="btn-sm"; addK.textContent="+ Add Keypad";
  addK.onclick=()=>{ r.control4.keypads.push({type:"Configurable",qty:1,gang:1,keys:0,colorCode:"WH"}); renderMain(); };
  ksec.appendChild(addK); wrap.appendChild(ksec);

  // Touchscreens
  const tse=document.createElement("div"); tse.className="systemSummary"; tse.innerHTML="<strong>Touchscreens</strong>";
  const tsRow=document.createElement("div"); tsRow.className="row";
  const add8=document.createElement("button"); add8.className="btn-sm"; add8.textContent='+ 8"';
  add8.onclick=()=>{ r.control4.touchscreens.push({size:'8"',colorCode:"WH"}); renderMain(); };
  const add10=document.createElement("button"); add10.className="btn-sm"; add10.textContent='+ 10"';
  add10.onclick=()=>{ r.control4.touchscreens.push({size:'10"',colorCode:"WH"}); renderMain(); };
  tsRow.appendChild(add8); tsRow.appendChild(add10); tse.appendChild(tsRow);
  (r.control4.touchscreens||[]).forEach((ts,i)=>{
    const row=document.createElement("div"); row.className="row";
    const info=document.createElement("div"); info.className="col"; info.innerHTML="<label>Touchscreen</label><div class='chip'>"+escapeHTML(ts.size)+"</div>";
    const colors=document.createElement("div"); colors.className="col"; colors.appendChild(buildSwatchRow(SWATCH_C4_TOUCH,ts.colorCode,(sel)=>{ ts.colorCode=sel.code; }));
    const del=document.createElement("div"); del.className="fit"; const b=document.createElement("button"); b.className="btn-sm"; b.textContent="Del"; b.onclick=()=>{ r.control4.touchscreens.splice(i,1); renderMain(); };
    del.appendChild(b); row.appendChild(info); row.appendChild(colors); row.appendChild(del); tse.appendChild(row);
  });
  wrap.appendChild(tse);

  // Remotes
  const rse=document.createElement("div"); rse.className="systemSummary"; rse.innerHTML="<strong>Remotes</strong>";
  const addR=document.createElement("button"); addR.className="btn-sm"; addR.textContent="+ Add Remote";
  addR.onclick=()=>{ r.control4.remotes.push({color:"BL"}); renderMain(); };
  rse.appendChild(addR);
  (r.control4.remotes||[]).forEach((rm,i)=>{
    const row=document.createElement("div"); row.className="row";
    const info=document.createElement("div"); info.className="col"; info.innerHTML='<label>Model</label><div class="chip">C4-HALO-TS</div>';
    const color=document.createElement("div"); color.className="col";
    // Black = BL → C4-HALO-TS-BL, Silver = AS → C4-HALO-TS-AS
    color.appendChild(buildSwatchRow([{name:"Black",code:"BL",cls:"sw-c4t-bl"},{name:"Silver",code:"AS",cls:"sw-c4-au"}],rm.color,(sel)=>{ rm.color=sel.code; }));
    const del=document.createElement("div"); del.className="fit"; const b=document.createElement("button"); b.className="btn-sm"; b.textContent="Del"; b.onclick=()=>{ r.control4.remotes.splice(i,1); renderMain(); };
    del.appendChild(b);
    row.appendChild(info); row.appendChild(color); row.appendChild(del); rse.appendChild(row);
  });
  wrap.appendChild(rse);

  mainContent.appendChild(wrap);

  // Bind top form (after append)
  const eq=el("#eqRoom"); if(eq){ eq.value=r.isEquipmentRoom?"yes":"no"; eq.onchange=(e)=>{ if(e.target.value==="yes"){ markEquipmentRoom(r); } else { r.isEquipmentRoom=false; } renderSummary(); }; }
  const v=el("#videoCount"); if(v){ v.oninput=(e)=>r.control4.videoStreams=Number(e.target.value||0); }
  const a=el("#audioEnabled"); if(a){ a.value=r.control4.audio.enabled?(r.control4.audio.wired?"wired":"wireless"):"no"; a.onchange=(e)=>{ const val=e.target.value; r.control4.audio.enabled=(val!=="no"); r.control4.audio.wired=(val==="wired"); }; }
  const s=el("#speakerCount"); if(s){ s.oninput=(e)=>r.control4.audio.speakers=Number(e.target.value||0); }
  const d=el("#audioDist"); if(d){ d.value=r.control4.audio.distribution||"Stereo"; d.onchange=(e)=>r.control4.audio.distribution=e.target.value; }

  // Render keypads (with Field12 qty, gang warning, color kit + wallplate auto in export)
  function renderKeypads(){
    const container=document.getElementById("keypadsList"); if(!container) return;
    container.innerHTML="";
    (r.control4.keypads||[]).forEach((k,idx)=>{
      const row=document.createElement("div"); row.className="row";
      const type=document.createElement("select"); ["Configurable","Dimmer"].forEach(t=>{const o=document.createElement("option");o.value=o.text=t; if(k.type===t) o.selected=true; type.appendChild(o);}); type.onchange=(e)=>k.type=e.target.value;
      const qty=document.createElement("input"); qty.type="number"; qty.min=1; qty.value=k.qty||1; qty.oninput=(e)=>k.qty=Number(e.target.value||1);
      const gang=document.createElement("input"); gang.type="number"; gang.min=1; gang.value=k.gang||1;
      const warn=document.createElement("div"); warn.className="chip warn"+(k.gang>4?"":" hidden"); warn.textContent=k.gang>4?"Wallplate supports up to 4-gang. Using 4-gang in export.":"";
      gang.oninput=(e)=>{ k.gang=Number(e.target.value||1); warn.textContent=k.gang>4?"Wallplate supports up to 4-gang. Using 4-gang in export.":""; warn.className="chip warn"+(k.gang>4?"":" hidden"); };
      const keys=document.createElement("input"); keys.type="number"; keys.min=0; keys.value=k.keys||0; keys.oninput=(e)=>k.keys=Number(e.target.value||0);
      const color=document.createElement("div"); color.appendChild(buildSwatchRow(SWATCH_C4_KEYPAD,k.colorCode||"WH",(sel)=>{k.colorCode=sel.code;}));
      const del=document.createElement("button"); del.className="btn-sm"; del.textContent="Del"; del.onclick=()=>{ r.control4.keypads.splice(idx,1); renderKeypads(); };
      const c1=document.createElement("div"); c1.className="col"; c1.innerHTML="<label>Type</label>"; c1.appendChild(type);
      const c2=document.createElement("div"); c2.className="col"; c2.innerHTML="<label>Qty (to Field 12)</label>"; c2.appendChild(qty);
      const c3=document.createElement("div"); c3.className="col"; c3.innerHTML="<label>Gang</label>"; c3.appendChild(gang);
      const c4=document.createElement("div"); c4.className="col"; c4.innerHTML="<label>Keys</label>"; c4.appendChild(keys);
      const c5=document.createElement("div"); c5.className="col"; c5.innerHTML="<label>Color</label>"; c5.appendChild(color);
      const c6=document.createElement("div"); c6.className="fit"; c6.appendChild(del);
      row.appendChild(c1); row.appendChild(c2); row.appendChild(c3); row.appendChild(c4); row.appendChild(c5); row.appendChild(c6);
      container.appendChild(row); container.appendChild(warn);
    });
  }
  renderKeypads();
}

/* ==========================
   LIGHTING (banks -> gangs)
========================== */
function renderLighting(r){
  const wrap=document.createElement("div");
  const list=document.createElement("div"); list.id="lightingBanksList";
  const add=document.createElement("button"); add.className="btn-sm"; add.textContent="+ Add Bank";
  add.onclick=()=>{ r.lighting.banks.push({id:uid(),name:`Bank ${r.lighting.banks.length+1}`,gangs:[]}); renderMain(); };
  wrap.appendChild(list); wrap.appendChild(add);

  (r.lighting.banks||[]).forEach((bank,bIdx)=>{
    const card=document.createElement("div"); card.className="systemSummary";
    const head=document.createElement("div"); head.className="row";
    const name=document.createElement("input"); name.value=bank.name; name.oninput=(e)=>bank.name=e.target.value;
    const del=document.createElement("button"); del.className="btn-sm"; del.textContent="Del Bank"; del.onclick=()=>{ r.lighting.banks.splice(bIdx,1); renderMain(); };
    head.appendChild(name); head.appendChild(del); card.appendChild(head);

    (bank.gangs||[]).forEach((g,gIdx)=>{
      const row=document.createElement("div"); row.className="row";
      const pos=document.createElement("input"); pos.type="number"; pos.min=1; pos.value=g.positions||1; pos.oninput=(e)=>{ g.positions=Number(e.target.value||1); renderSummary(); };
      const type=document.createElement("select"); ["Switch","Dimmer","Keypad"].forEach(t=>{ const o=document.createElement("option"); o.value=o.text=t; if(g.type===t) o.selected=true; type.appendChild(o); }); type.onchange=(e)=>g.type=e.target.value;
      const qty=document.createElement("input"); qty.type="number"; qty.min=1; qty.value=g.qty||1; qty.oninput=(e)=>g.qty=Number(e.target.value||1); // to Field 12
      const color=document.createElement("div"); color.appendChild(buildSwatchRow(SWATCH_LUTRON,g.colorCode||"WH",(sel)=>{ g.colorCode=sel.code; }));
      const delG=document.createElement("button"); delG.className="btn-sm"; delG.textContent="Del"; delG.onclick=()=>{ bank.gangs.splice(gIdx,1); renderMain(); };
      const c1=document.createElement("div"); c1.className="col"; c1.innerHTML="<label>Positions</label>"; c1.appendChild(pos);
      const c2=document.createElement("div"); c2.className="col"; c2.innerHTML="<label>Type</label>"; c2.appendChild(type);
      const c3=document.createElement("div"); c3.className="col"; c3.innerHTML="<label>Qty (to Field 12)</label>"; c3.appendChild(qty);
      const c4=document.createElement("div"); c4.className="col"; c4.innerHTML="<label>Color</label>"; c4.appendChild(color);
      const c5=document.createElement("div"); c5.className="fit"; c5.appendChild(delG);
      row.appendChild(c1); row.appendChild(c2); row.appendChild(c3); row.appendChild(c4); row.appendChild(c5); card.appendChild(row);
    });

    const addGang=document.createElement("button"); addGang.className="btn-sm"; addGang.textContent="+ Gang";
    addGang.onclick=()=>{ bank.gangs.push({positions:1,type:"Switch",qty:1,colorCode:"WH"}); renderMain(); };
    card.appendChild(addGang);
    list.appendChild(card);
  });

  const counts=countLutronDevices();
  const note=document.createElement("div"); note.className="muted"; note.style.marginTop="8px"; note.textContent=`Devices: ${counts.devices} → RA3 Controllers needed: ${counts.controllers}`;
  wrap.appendChild(note);

  const hasDimmer=(r.lighting.banks||[]).some(b=> (b.gangs||[]).some(g=> g.type==="Dimmer"));
  const kd=document.createElement("div"); kd.className="chip"; kd.textContent=hasDimmer?"Note: keypad dimmers present in this room":"Note: no keypad dimmers in this room";
  wrap.appendChild(kd);

  mainContent.appendChild(wrap);
}

/* ==========================
   CAMERAS
========================== */
function renderCameras(r){
  const wrap=document.createElement("div");
  const list=document.createElement("div"); list.id="camsList";
  const add=document.createElement("button"); add.className="btn-sm"; add.textContent="+ Add Camera";
  add.onclick=()=>{ r.cameras.push({type:"Dome",color:"W",height:"10 ft"}); renderMain(); };
  wrap.appendChild(list); wrap.appendChild(add);

  (r.cameras||[]).forEach((c,idx)=>{
    const row=document.createElement("div"); row.className="row";
    const type=document.createElement("select"); ["Dome","Bullet","Turret","PTZ"].forEach(t=>{ const o=document.createElement("option"); o.value=o.text=t; if(c.type===t) o.selected=true; type.appendChild(o); }); type.onchange=(e)=>{ c.type=e.target.value; renderSummary(); };
    const col=document.createElement("div"); col.appendChild(buildSwatchRow(CAMERA_COLOR,c.color||"W",(sel)=>{ c.color=sel.code; }));
    const height=document.createElement("select"); ["8 ft","10 ft","12 ft","15 ft","20 ft","25 ft","Custom"].forEach(h=>{ const o=document.createElement("option"); o.value=o.text=h; if(c.height===h) o.selected=true; height.appendChild(o); }); height.onchange=(e)=>c.height=e.target.value;
    const del=document.createElement("button"); del.className="btn-sm"; del.textContent="Del"; del.onclick=()=>{ r.cameras.splice(idx,1); renderMain(); };
    const c1=document.createElement("div"); c1.className="col"; c1.appendChild(type);
    const c2=document.createElement("div"); c2.className="col"; c2.appendChild(col);
    const c3=document.createElement("div"); c3.className="col"; c3.appendChild(height);
    const c4=document.createElement("div"); c4.className="fit"; c4.appendChild(del);
    row.appendChild(c1); row.appendChild(c2); row.appendChild(c3); row.appendChild(c4); list.appendChild(row);
  });

  const camsTotal=totalCameras();
  const est=estimateStorageTB(camsTotal,state.settings.cameraBitrateMbps,state.settings.cameraRetentionDays);
  const storage=document.createElement("div"); storage.className="systemSummary";
  storage.innerHTML="<strong>Storage Estimate</strong><div class='muted'>"+camsTotal+" cams @ "+state.settings.cameraBitrateMbps+" Mbps for "+state.settings.cameraRetentionDays+" days ≈ <b>"+est.toFixed(1)+" TB</b></div>";
  wrap.appendChild(storage);

  mainContent.appendChild(wrap);
}

/* ==========================
   SECURITY
========================== */
function renderSecurity(r){
  const wrap=document.createElement("div");
  const zones=document.createElement("div"); zones.id="zonesList";
  const addZ=document.createElement("button"); addZ.className="btn-sm"; addZ.textContent="+ Add Sensor";
  addZ.onclick=()=>{ r.security.zones.push({type:"Qolsys-DW-Mini",qty:1}); renderMain(); };
  wrap.appendChild(zones); wrap.appendChild(addZ);

  (r.security.zones||[]).forEach((z,idx)=>{
    const row=document.createElement("div"); row.className="row";
    const sel=document.createElement("select"); ["Qolsys-DW-Mini","IQ-Motion-S","IQ-Glass-S","IQ-Carbon","DSC-PG9936"].forEach(t=>{ const o=document.createElement("option"); o.value=o.text=t; if(z.type===t) o.selected=true; sel.appendChild(o); }); sel.onchange=(e)=>z.type=e.target.value;
    const count=document.createElement("input"); count.type="number"; count.min=1; count.value=z.qty||1; count.oninput=(e)=>z.qty=Number(e.target.value||1);
    const del=document.createElement("button"); del.className="btn-sm"; del.textContent="Del"; del.onclick=()=>{ r.security.zones.splice(idx,1); renderMain(); };
    const c1=document.createElement("div"); c1.className="col"; c1.appendChild(sel);
    const c2=document.createElement("div"); c2.className="col"; c2.appendChild(count);
    const c3=document.createElement("div"); c3.className="fit"; c3.appendChild(del);
    row.appendChild(c1); row.appendChild(c2); row.appendChild(c3); zones.appendChild(row);
  });

  // Panel
  const panel=document.createElement("div"); panel.className="systemSummary";
  panel.innerHTML="<label><input type='checkbox' id='panelPresent'> This room gets a panel</label> <select id='panelType' class='inline'><option value='remote'>Remote</option><option value='main'>Main</option></select>";
  wrap.appendChild(panel); mainContent.appendChild(wrap);

  const panelPresent=el("#panelPresent"), panelType=el("#panelType");
  panelPresent.checked=!!r.security.panel.present; panelType.value=r.security.panel.type||"remote";
  panelPresent.onchange=()=>{ r.security.panel.present=panelPresent.checked; };
  panelType.onchange=()=>{
    if(panelType.value==="main" && r.security.panel.present){
      const ex=state.floors.flatMap(f=>f.rooms).find(x=>x.security&&x.security.panel&&x.security.panel.present&&x.security.panel.type==="main");
      if(ex && ex!==r && !confirm("A main panel exists. Replace with this room?")){ panelType.value="remote"; return; }
      state.floors.forEach(f=>f.rooms.forEach(rr=>{ if(rr.security&&rr.security.panel) rr.security.panel.type="remote"; }));
      r.security.panel.type="main";
    } else {
      r.security.panel.type=panelType.value;
    }
  };
}

/* ==========================
   NETWORKING
========================== */
function renderNetworking(r){
  const wrap=document.createElement("div");
  const list=document.createElement("div"); list.id="networkBanksList";
  const add=document.createElement("button"); add.className="btn-sm"; add.textContent="+ Add Bank";
  add.onclick=()=>{ r.networking.banks.push({id:uid(),name:`Panel ${r.networking.banks.length+1}`,jacks:0,colorCode:null}); renderMain(); };
  wrap.appendChild(list); wrap.appendChild(add);

  (r.networking.banks||[]).forEach((bank,idx)=>{
    const card=document.createElement("div"); card.className="systemSummary";
    const head=document.createElement("div"); head.className="row";
    const name=document.createElement("input"); name.value=bank.name; name.oninput=(e)=>bank.name=e.target.value;
    const del=document.createElement("button"); del.className="btn-sm"; del.textContent="Del Bank"; del.onclick=()=>{ r.networking.banks.splice(idx,1); renderMain(); };
    head.appendChild(name); head.appendChild(del); card.appendChild(head);

    const row=document.createElement("div"); row.className="row";
    const j=document.createElement("input"); j.type="number"; j.min=0; j.value=bank.jacks||0; j.oninput=(e)=>{ bank.jacks=Number(e.target.value||0); renderSummary(); };
    const poe=document.createElement("div"); poe.className="col muted"; poe.innerHTML=`PoE (auto): ${autoPoECount()}`;
    const col=document.createElement("div"); col.className="col"; col.innerHTML="<label>Color (optional)</label>"; col.appendChild(buildSwatchRow(SWATCH_NETWORK,bank.colorCode,(sel)=>{ bank.colorCode=sel.code; }));
    row.appendChild(j); row.appendChild(poe); row.appendChild(col);
    card.appendChild(row); list.appendChild(card);
  });
  mainContent.appendChild(wrap);
}

/* ==========================
   Misc / Notes
========================== */
function renderMisc(r,tab){
  const wrap=document.createElement("div");
  const ta=document.createElement("textarea"); ta.placeholder=`Notes for ${tab}`; ta.value=r[tab.toLowerCase()]||"";
  ta.oninput=(e)=>r[tab.toLowerCase()]=e.target.value;
  wrap.appendChild(ta); mainContent.appendChild(wrap);
}

/* ==========================
   Summary & Calculations
========================== */
const summaryArea=el("#summaryArea");
function renderSummary(){
  const totals={cams:0,keypads:0,touch:0,jacks:0,loads:0,poe:0};
  state.floors.forEach(f=>f.rooms.forEach(r=>{
    totals.cams+=(r.cameras||[]).length;
    totals.keypads+=(r.control4.keypads||[]).length;
    totals.touch+=(r.control4.touchscreens||[]).length;
    (r.lighting.banks||[]).forEach(b=> (b.gangs||[]).forEach(g=> totals.loads+=Number(g.positions||0)));
    (r.networking.banks||[]).forEach(b=> totals.jacks+=Number(b.jacks||0));
  }));
  totals.poe=autoPoECount();
  const estTB=estimateStorageTB(totals.cams,state.settings.cameraBitrateMbps,state.settings.cameraRetentionDays);
  summaryArea.innerHTML=
    `<div class='chip'>Cameras: ${totals.cams}</div>`
   +`<div class='chip'>Touchscreens: ${totals.touch}</div>`
   +`<div class='chip'>Keypads: ${totals.keypads}</div>`
   +`<div class='chip'>Jacks: ${totals.jacks}</div>`
   +`<div class='chip'>Lighting Loads: ${totals.loads}</div>`
   +`<div class='chip'>PoE: ${totals.poe}</div>`
   +`<div class='chip'>Storage ≈ ${estTB.toFixed(1)} TB</div>`;
}
function autoPoECount(){ let c=0; state.floors.forEach(f=>f.rooms.forEach(r=>{ c+=(r.cameras||[]).length; c+=(r.control4.touchscreens||[]).length; })); return c; }
function totalCameras(){ return state.floors.reduce((a,f)=>a+f.rooms.reduce((aa,r)=>aa+(r.cameras||[]).length,0),0); }
function estimateStorageTB(nCams,mbps,days){ const totalBits=nCams*mbps*1e6*days*24*3600; return (totalBits/8)/1e12; }

/* RA3: ≤2 controllers, 100 devices each */
function countLutronDevices(){
  let devices=0;
  state.floors.forEach(f=>f.rooms.forEach(r=> (r.lighting.banks||[]).forEach(b=>(b.gangs||[]).forEach(g=> devices+=Number(g.positions||0)))) );
  const controllers=Math.min(2,Math.max(1,Math.ceil(devices/100)||0));
  return {devices,controllers};
}

/* NVR plan (cost-first) */
function nvrPlan(){
  const n=totalCameras(); const plan=[]; if(n<=0) return plan;
  let remaining=n;
  if(remaining>=32){ plan.push({channels:32,model:"LUMA-NVR-32"}); remaining-=32; }
  if(remaining>0 && remaining<=8){ plan.push({channels:8,model:"LUMA-NVR-8"}); remaining-=8; }
  else if(remaining>0 && remaining<=16){ plan.push({channels:16,model:"LUMA-NVR-16"}); remaining-=16; }
  else if(remaining>16 && remaining<=24){ plan.push({channels:16,model:"LUMA-NVR-16"}); remaining-=16; plan.push({channels:8,model:"LUMA-NVR-8"}); remaining-=8; }
  else if(remaining>24 && remaining<=32){ plan.push({channels:32,model:"LUMA-NVR-32"}); remaining-=32; }
  if(n>32 && n<=40){ const i=plan.findIndex(p=>p.channels===8); if(i>=0) plan.splice(i,1,{channels:16,model:"LUMA-NVR-16"}); }
  return plan;
}

/* Rack sizing (Strong SR-WMS-6U..24U), grouping by system then spilling to new rack */
function computeRacks(){
  const plan=[];
  const equip = state.floors.flatMap(f=>f.rooms.map(r=>({f,r}))).find(x=>x.r.isEquipmentRoom) ||
                (state.floors[0]?{f:state.floors[0],r:state.floors[0].rooms[0]}:null);
  if(!equip||!equip.r) return [];

  const jacks=state.floors.reduce((a,f)=>a+f.rooms.reduce((aa,r)=>aa+(r.networking.banks||[]).reduce((s,b)=>s+Number(b.jacks||0),0),0),0);
  const portsNeeded=Math.ceil(jacks*(1+state.settings.sparePercent/100));
  const switches=portsNeeded>24?[{model:"ARAKNIS-420-48P",ru:1}]:portsNeeded>8?[{model:"ARAKNIS-420-24P",ru:1}]:portsNeeded>0?[{model:"ARAKNIS-420-8P",ru:1}]:[];

  let smalls=0; state.floors.forEach(f=>f.rooms.forEach(r=>{ if(r.control4 && (r.control4.videoStreams>0 || (r.control4.audio&&r.control4.audio.enabled))) smalls++; }));
  const shelves=smalls>0?[{model:"STRONG-1U-SHELF",ru:1}]:[];

  const fixed=[{model:"WattBox WB-700CH",ru:2}];
  const vents=[{model:"VENT-1U",ru:1},{model:"VENT-1U",ru:1}];
  const reserve=[{model:"UPS-RESERVED",ru:2}];

  const parts=[...fixed,...switches,...nvrPlan().map(n=>({model:n.model,ru:2})),...shelves,...vents,...reserve];

  let current={ru:0,items:[]};
  function finalize(){ if(current.items.length) plan.push(current); current={ru:0,items:[]}; }
  function add(it){ if(current.ru+it.ru>24) finalize(); current.items.push(it); current.ru+=it.ru; }
  parts.forEach(add); finalize();

  plan.forEach(rk=>{ const need=rk.ru; rk.size=need<=6?6:need<=12?12:need<=18?18:24; rk.model=`SR-WMS-${rk.size}U`; });
  return plan;
}

/* ==========================
   Export CSV
========================== */
function row(q,model,location,manufacturer,system,cf12){ return {"Quantity":q,"Model":model,"Location":location,"Manufacturer":manufacturer,"System":system,"Custom Field 12":cf12||""}; }
function exportFilename(){
  const today=new Date(); const y=today.getFullYear(); const m=String(today.getMonth()+1).padStart(2,"0"); const d=String(today.getDate()).padStart(2,"0");
  const cn=(state.client.name||"Client").trim();
  let pn=(state.projectName||"").trim(); if(!pn) pn = cn+" Project";
  return `${cn} - ${pn} - ${y}-${m}-${d}.csv`.replace(/\s+/g," ");
}

function exportCSV(){
  const rows=[];
  state.floors.forEach(f=>f.rooms.forEach(r=>{
    const loc=`${f.name}: ${r.name}`;
    // Control4
    if(r.control4 && r.control4.videoStreams>0){ rows.push(row(1,"C4-CORE1",loc,"Control4",SYSTEM_TO_EXPORT.Control4,"Video controller for stream")); }
    if(r.control4 && r.control4.audio && r.control4.audio.enabled && r.control4.audio.wired && r.control4.audio.speakers>0){
      rows.push(row(1,"TRIAD-AMP-1U",loc,"TRIAD","Control Systems","Wired audio amp"));
    }
    (r.control4.keypads||[]).forEach(k=>{
      const base = (k.type==="Dimmer") ? "C4-L-KDS" : "C4-L-KC";             // keypad body
      const col  = k.colorCode||"WH";
      const gang = Math.max(1,Number(k.gang||1));
      const wall = Math.min(gang,4);                                         // max 4-gang wallplate
      const f12  = `qty:${k.qty||1}; keys:${k.keys||0}; color:${col}; gang:${gang}`; // goes to Field12
      rows.push(row(1,base,loc,"Control4","Control Systems",f12));
      rows.push(row(1,`C4-L-CKKC-${col}`,loc,"Control4","Control Systems",f12));
      rows.push(row(1,`C4-L-FP${wall}-${col}`,loc,"Control4","Control Systems",f12+(gang>4?" [WARN: used 4-gang wallplate in export]":"")));
    });
    (r.control4.touchscreens||[]).forEach(ts=>{
      const col=ts.colorCode||"WH";
      const sku=(ts.size==='8"')?`C4-T4IW8-${col}`:`C4-T4IW10-${col}`;
      rows.push(row(1,sku,loc,"Control4","Control Systems",`size:${ts.size}; color:${col}`));
    });
    (r.control4.remotes||[]).forEach(rm=>{
      const model=(rm.color==="AS")?"C4-HALO-TS-AS":"C4-HALO-TS-BL";
      rows.push(row(1,model,loc,"Control4","Control Systems",`color:${rm.color}`));
    });

    // Lighting
    (r.lighting.banks||[]).forEach(b=>(b.gangs||[]).forEach(g=>{
      let model= (g.type==="Dimmer")?"RRST-PRO-N-XX":(g.type==="Switch"?"RRST-8ANS-XX":"RRST-W4B-XX");
      const col=g.colorCode||"WH"; model=model.replace("XX",col);
      rows.push(row(1,model,loc,"Lutron","Lighting",`bank:${b.name||"Bank"}; positions:${g.positions}; qty:${g.qty||1}; color:${col}`));
    }));

    // Cameras (Luma)
    (r.cameras||[]).forEach(c=>{
      let model="";
      if(c.type==="Bullet") model=`LUM-820-IP-BMH${c.color||"W"}`;
      else if(c.type==="Turret") model="LUM-820-IP-TMHC";
      else if(c.type==="PTZ") model="LUM-420-IP-PTZ-4X";
      else model=`LUM-820-IP-DF${c.color||"W"}`; // Dome
      rows.push(row(1,model,loc,"Luma","Surveillance",`${c.type}; ${c.height}; color:${c.color||"W"}`));
    });

    // Security
    (r.security.zones||[]).forEach(z=> rows.push(row(1,z.type,loc,"Qolsys/DSC","Security Systems",`qty:${z.qty||1}`)));
    if(r.security.panel && r.security.panel.present){
      rows.push(row(1,(r.security.panel.type==="main"?"IQ4-MAIN":"IQ4-REMOTE"),loc,"Qolsys","Security Systems",`panel:${r.security.panel.type}`));
    }

    // Networking
    (r.networking.banks||[]).forEach(b=>{
      rows.push(row(1,"Cat6-150",loc,"Generic","Networking",`bank:${b.name}; jacks:${b.jacks}; poe:${autoPoECount()}; color:${b.colorCode||"n/a"}`));
    });
  }));

  // Equipment-room aggregates
  const equip = state.floors.flatMap(f=>f.rooms.map(r=>({f,r}))).find(x=>x.r.isEquipmentRoom) ||
                (state.floors[0]?{f:state.floors[0],r:state.floors[0].rooms[0]}:null);
  if(equip){
    const loc=`${equip.f.name}: ${equip.r.name}`;
    nvrPlan().forEach(n=> rows.push(row(1,n.model,loc,"Luma","Surveillance",`${n.channels} channels`)));
    const jacksTotal=state.floors.reduce((a,f)=>a+f.rooms.reduce((aa,r)=>aa+(r.networking.banks||[]).reduce((s,b)=>s+Number(b.jacks||0),0),0),0);
    const portsNeeded=Math.ceil(jacksTotal*(1+state.settings.sparePercent/100));
    if(portsNeeded>0){ let sw="ARAKNIS-420-8P"; if(portsNeeded>24) sw="ARAKNIS-420-48P"; else if(portsNeeded>8) sw="ARAKNIS-420-24P"; rows.push(row(1,sw,loc,"Araknis","Networking",`${portsNeeded} ports incl ${state.settings.sparePercent}% spares`)); }
    rows.push(row(1,"WB-700CH",loc,"WattBox","Networking","Power conditioner (2RU)"));
    computeRacks().forEach((rk,i)=> rows.push(row(1,rk.model,loc,"Strong","Networking",`Rack ${i+1}: ${rk.ru} RU used; contents:${rk.items.map(it=>it.model).join(" | ")}`)));
  }

  const out=[CSV_HEADERS]; rows.forEach(it=>out.push(CSV_HEADERS.map(h=>csvCell(it[h]))));
  const csv=out.map(r=>r.join(",")).join("\n");
  const fname=exportFilename();
  downloadFile(csv,fname,"text/csv");
  alert("CSV generated: "+fname);
}

/* ==========================
   Header binds & Init
========================== */
el("#exportBtn").onclick=exportCSV;
el("#downloadJson").onclick=()=>{ const out=JSON.stringify(state,null,2); downloadFile(out,exportFilename().replace(".csv",".json"),"application/json"); };
el("#clearProject").onclick=()=>{ if(confirm("Clear project?")){ state={client:{name:"",phone:"",email:"",address:""},projectName:"",floors:[],selectedFloorId:null,selectedRoomId:null,selectedTab:"Control4",settings:state.settings,racks:[]}; renderLeft(); renderTabs(); renderMain(); renderSummary(); } };
el("#addFloorBtn").onclick=()=>addFloor();
el("#seedBtn").onclick=seedSample;

const cName=el("#clientName"), cPhone=el("#clientPhone"), cEmail=el("#clientEmail"), cAddr=el("#clientAddress"), pName=el("#projectName");
[cName,cPhone,cEmail,cAddr,pName].forEach(inp=> inp.addEventListener("input",()=>{
  state.client.name=cName.value; state.client.phone=cPhone.value; state.client.email=cEmail.value; state.client.address=cAddr.value; state.projectName=pName.value;
}));

function seedSample(){
  state.floors=[]; addFloor("Main Floor");
  const f=state.floors[0];
  f.rooms[0].name="Living Room";
  f.rooms[0].control4.videoStreams=1;
  f.rooms[0].control4.audio.enabled=true;
  f.rooms[0].control4.audio.wired=true;
  f.rooms[0].lighting.banks.push({id:uid(),name:"Bank 1",gangs:[{positions:2,type:"Dimmer",qty:1,colorCode:"WH"}]});
  f.rooms[0].networking.banks.push({id:uid(),name:"Patch 1",jacks:4,colorCode:"BL"});
  f.rooms[0].cameras.push({type:"Dome",color:"W",height:"10 ft"});
  addRoom(f.id,"Kitchen");
  const f2id=uid(); state.floors.push({id:f2id,name:"Upstairs",rooms:[]}); addRoom(f2id,"Bedroom");
  state.floors[0].rooms[0].isEquipmentRoom=true;
  renderLeft(); renderTabs(); renderMain(); renderSummary();
}

function init(){
  renderTabs();
  if(state.floors.length===0) addFloor("Floor 1");
  renderLeft(); renderMain(); renderSummary();
  // quick smoke tests
  try{
    console.assert(el("#floorsList"),"floorsList exists");
    console.assert(state.floors.length>0 && state.floors[0].rooms.length>0,"seeded floor/room");
    state.selectedTab="Control4"; renderMain();
    console.assert(el("#eqRoom"),"eqRoom select exists");
  }catch(e){ console.warn("Self-test warn:",e); }
}
init();
